/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package starmap;

import java.awt.Container;
import java.util.HashMap;
import java.util.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import javax.swing.*;

/**
 *
 * @author 7051665
 */
public final class StarMap extends javax.swing.JFrame
{
    /**
     * Creates new form StarGUI
     * @param args - command line arguments
     */
    public StarMap(String[] args) 
    {        
        initComponents();
        ReadArgs(args);
        StarPos.CalculateCoords(this.drawingPane1.smap, this.drawingPane1.gaze_alt, 
                                this.drawingPane1.gaze_azi, this.drawingPane1.gaze_lat, 
                                this.drawingPane1.gaze_lon, this.drawingPane1.now_msec);
        this.drawingPane1.repaint();
        this.drawingPane1.requestFocus();
        UpdateViewerInfo();
        new javax.swing.Timer(delay, taskPerformer).start();
        
        

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        InfoPanel = new javax.swing.JPanel();
        NameTextBox = new javax.swing.JTextField();
        CommonNameTextBox = new javax.swing.JTextField();
        HRNumberTextBox = new javax.swing.JTextField();
        ConstellationTextBox = new javax.swing.JTextField();
        VMagTextBox = new javax.swing.JTextField();
        ClassTextBox = new javax.swing.JTextField();
        RATextBox = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        DecTextBox = new javax.swing.JTextField();
        AltitudeTextBox = new javax.swing.JTextField();
        AzimuthTextBox = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        GazeAltTextBox = new javax.swing.JTextField();
        GazeAzimuthTextBox = new javax.swing.JTextField();
        LattitudeTextBox = new javax.swing.JTextField();
        LongitudeTextBox = new javax.swing.JTextField();
        DateTextBox = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        VMagCutoffTextBox = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        drawingPane1 = new starmap.DrawingPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        OpenStarsAction = new javax.swing.JMenuItem();
        OpenConstellationsAction = new javax.swing.JMenuItem();
        CloseStarsAction = new javax.swing.JMenuItem();
        CloseConstellationsAction = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        QuitAction = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        SetDateTimeAction = new javax.swing.JMenuItem();
        SetLocationAction = new javax.swing.JMenuItem();
        SetAltAziAction = new javax.swing.JMenuItem();
        SetCutoffAction = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        ToggleIdentifiersAction = new javax.swing.JCheckBoxMenuItem();
        ToggleConstellationsAction = new javax.swing.JCheckBoxMenuItem();
        ToggleGridAction = new javax.swing.JCheckBoxMenuItem();
        ToggleTimeLapseAction = new javax.swing.JCheckBoxMenuItem();
        ZoomInAction = new javax.swing.JMenuItem();
        ZoomOutAction = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        AboutAction = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Star Map");
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jToolBar1.setRollover(true);
        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        InfoPanel.setBackground(new java.awt.Color(102, 102, 102));
        InfoPanel.setFocusable(false);
        InfoPanel.setPreferredSize(new java.awt.Dimension(250, 497));

        NameTextBox.setEditable(false);
        NameTextBox.setFocusable(false);

        CommonNameTextBox.setEditable(false);
        CommonNameTextBox.setFocusable(false);

        HRNumberTextBox.setEditable(false);
        HRNumberTextBox.setFocusable(false);

        ConstellationTextBox.setEditable(false);
        ConstellationTextBox.setFocusable(false);

        VMagTextBox.setEditable(false);
        VMagTextBox.setFocusable(false);

        ClassTextBox.setEditable(false);
        ClassTextBox.setFocusable(false);

        RATextBox.setEditable(false);
        RATextBox.setFocusable(false);

        jLabel1.setText("Name:");

        jLabel2.setText("Common Name:");

        jLabel3.setText("HR Number:");

        jLabel4.setText("Constellation:");

        jLabel5.setText("Visual Magnitude:");

        jLabel6.setText("Star Class:");

        jLabel7.setText("Right Ascension:");

        DecTextBox.setEditable(false);
        DecTextBox.setFocusable(false);

        AltitudeTextBox.setEditable(false);
        AltitudeTextBox.setFocusable(false);

        AzimuthTextBox.setEditable(false);
        AzimuthTextBox.setFocusable(false);

        jLabel8.setText("Declination:");

        jLabel9.setText("Altitude:");

        jLabel10.setText("Azimuth:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Selected Star");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Viewer Information");

        GazeAltTextBox.setEditable(false);
        GazeAltTextBox.setFocusable(false);

        GazeAzimuthTextBox.setEditable(false);
        GazeAzimuthTextBox.setFocusable(false);

        LattitudeTextBox.setEditable(false);
        LattitudeTextBox.setFocusable(false);

        LongitudeTextBox.setEditable(false);
        LongitudeTextBox.setFocusable(false);

        DateTextBox.setEditable(false);
        DateTextBox.setFocusable(false);

        jLabel13.setText("Gaze Altitude:");

        jLabel14.setText("Gaze Azimuth:");

        jLabel15.setText("Lattitude:");

        jLabel16.setText("Longitude:");

        jLabel17.setText("Date:");

        VMagCutoffTextBox.setEditable(false);

        jLabel18.setText("VMag Cutoff:");

        javax.swing.GroupLayout InfoPanelLayout = new javax.swing.GroupLayout(InfoPanel);
        InfoPanel.setLayout(InfoPanelLayout);
        InfoPanelLayout.setHorizontalGroup(
            InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InfoPanelLayout.createSequentialGroup()
                        .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                        .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(AltitudeTextBox, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(AzimuthTextBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                            .addComponent(DecTextBox, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(jSeparator2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InfoPanelLayout.createSequentialGroup()
                        .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(RATextBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                            .addComponent(ClassTextBox, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(VMagTextBox, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ConstellationTextBox, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NameTextBox, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CommonNameTextBox, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(HRNumberTextBox)))
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InfoPanelLayout.createSequentialGroup()
                        .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)
                            .addComponent(jLabel18)
                            .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(DateTextBox)
                            .addComponent(VMagCutoffTextBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                            .addComponent(LattitudeTextBox)
                            .addComponent(LongitudeTextBox)
                            .addComponent(GazeAltTextBox)
                            .addComponent(GazeAzimuthTextBox, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        InfoPanelLayout.setVerticalGroup(
            InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CommonNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HRNumberTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConstellationTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(VMagTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ClassTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RATextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DecTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AltitudeTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AzimuthTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GazeAltTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GazeAzimuthTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LattitudeTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LongitudeTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DateTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(VMagCutoffTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        getContentPane().add(InfoPanel, java.awt.BorderLayout.LINE_START);

        drawingPane1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                drawingPane1MouseDragged(evt);
            }
        });
        drawingPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                drawingPane1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                drawingPane1MouseReleased(evt);
            }
        });
        drawingPane1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                drawingPane1KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout drawingPane1Layout = new javax.swing.GroupLayout(drawingPane1);
        drawingPane1.setLayout(drawingPane1Layout);
        drawingPane1Layout.setHorizontalGroup(
            drawingPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 592, Short.MAX_VALUE)
        );
        drawingPane1Layout.setVerticalGroup(
            drawingPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 520, Short.MAX_VALUE)
        );

        getContentPane().add(drawingPane1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        OpenStarsAction.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        OpenStarsAction.setText("Open Stars...");
        OpenStarsAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenStarsActionActionPerformed(evt);
            }
        });
        jMenu1.add(OpenStarsAction);

        OpenConstellationsAction.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        OpenConstellationsAction.setText("Open Constellations...");
        OpenConstellationsAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenConstellationsActionActionPerformed(evt);
            }
        });
        jMenu1.add(OpenConstellationsAction);

        CloseStarsAction.setText("Close Stars...");
        CloseStarsAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseStarsActionActionPerformed(evt);
            }
        });
        jMenu1.add(CloseStarsAction);

        CloseConstellationsAction.setText("Close Constellations...");
        CloseConstellationsAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseConstellationsActionActionPerformed(evt);
            }
        });
        jMenu1.add(CloseConstellationsAction);
        jMenu1.add(jSeparator1);

        QuitAction.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        QuitAction.setText("Quit");
        QuitAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuitActionActionPerformed(evt);
            }
        });
        jMenu1.add(QuitAction);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        SetDateTimeAction.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        SetDateTimeAction.setText("Set Date/Time...");
        SetDateTimeAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetDateTimeActionActionPerformed(evt);
            }
        });
        jMenu2.add(SetDateTimeAction);

        SetLocationAction.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        SetLocationAction.setText("Set Location...");
        SetLocationAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetLocationActionActionPerformed(evt);
            }
        });
        jMenu2.add(SetLocationAction);

        SetAltAziAction.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        SetAltAziAction.setText("Set Altitude/Azimuth...");
        SetAltAziAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetAltAziActionActionPerformed(evt);
            }
        });
        jMenu2.add(SetAltAziAction);

        SetCutoffAction.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        SetCutoffAction.setText("Set Visual Magnitude Cutoff...");
        SetCutoffAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetCutoffActionActionPerformed(evt);
            }
        });
        jMenu2.add(SetCutoffAction);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("View");

        ToggleIdentifiersAction.setSelected(true);
        ToggleIdentifiersAction.setText("Toggle Identifiers");
        ToggleIdentifiersAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToggleIdentifiersActionActionPerformed(evt);
            }
        });
        jMenu3.add(ToggleIdentifiersAction);

        ToggleConstellationsAction.setSelected(true);
        ToggleConstellationsAction.setText("Toggle Constellations");
        ToggleConstellationsAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToggleConstellationsActionActionPerformed(evt);
            }
        });
        jMenu3.add(ToggleConstellationsAction);

        ToggleGridAction.setSelected(true);
        ToggleGridAction.setText("Toggle Grid Lines");
        ToggleGridAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToggleGridActionActionPerformed(evt);
            }
        });
        jMenu3.add(ToggleGridAction);

        ToggleTimeLapseAction.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_SPACE, 0));
        ToggleTimeLapseAction.setText("Toggle Time Lapse");
        ToggleTimeLapseAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToggleTimeLapseActionActionPerformed(evt);
            }
        });
        jMenu3.add(ToggleTimeLapseAction);

        ZoomInAction.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_EQUALS, 0));
        ZoomInAction.setText("Zoom In");
        ZoomInAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZoomInActionActionPerformed(evt);
            }
        });
        jMenu3.add(ZoomInAction);

        ZoomOutAction.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS, 0));
        ZoomOutAction.setText("Zoom Out");
        ZoomOutAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZoomOutActionActionPerformed(evt);
            }
        });
        jMenu3.add(ZoomOutAction);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Help");

        AboutAction.setText("About");
        AboutAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutActionActionPerformed(evt);
            }
        });
        jMenu4.add(AboutAction);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

  int delay = 33; //milliseconds
  boolean TimeLapseEnabled = false;
  ActionListener taskPerformer = new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent evt) {
          //...Perform a task...
          if(TimeLapseEnabled)
          {
             drawingPane1.now_msec += 1 * 60000;  //advance 20 minutes
             StarPos.CalculateCoords(drawingPane1.smap, drawingPane1.gaze_alt, 
                                     drawingPane1.gaze_azi, drawingPane1.gaze_lat, 
                                     drawingPane1.gaze_lon, drawingPane1.now_msec);
              drawingPane1.repaint();
              UpdateViewerInfo();
          }
      }
  };
    private void SetDateTimeActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetDateTimeActionActionPerformed

        // TODO add your handling code here:
        String input = JOptionPane.showInputDialog(this, "Enter the Date. (MM/dd/yyyy HH:mm:ss");
        long newdate;
        if(input != null)
        {
            try
            {
                //parse id depricated whoops
                newdate = Date.parse(input);
                this.drawingPane1.now_msec = newdate;
                this.drawingPane1.DateTime = input;
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "\"" + input + "\" is formatted incorrectly");
            }
            finally
            {
                StarPos.CalculateCoords(this.drawingPane1.smap, this.drawingPane1.gaze_alt, 
                    this.drawingPane1.gaze_azi, this.drawingPane1.gaze_lat, 
                    this.drawingPane1.gaze_lon, this.drawingPane1.now_msec);
                this.drawingPane1.repaint();
                UpdateViewerInfo();
            }
        }
    }//GEN-LAST:event_SetDateTimeActionActionPerformed

    private void SetAltAziActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetAltAziActionActionPerformed
        // TODO add your handling code here:
        String in_alt = JOptionPane.showInputDialog(this, "Enter new gaze altitude ( 0 < degrees < 90 )");
        double new_alt = 0;
        if(in_alt != null)
        {
            try
            {
                new_alt = Math.toRadians(Double.parseDouble(in_alt));
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(this, "\"" + in_alt + "\" is formatted incorrectly");
            }
        }
        
        String in_azi = JOptionPane.showInputDialog(this, "Enter new gaze azimuth ( 0 < degrees < 360 )");
        if(in_azi != null)
        {
            try
            {
                drawingPane1.gaze_azi = Math.toRadians(Double.parseDouble(in_azi));
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "\"" + in_azi + "\" is formatted incorrectly");
            }
        }
        if(new_alt >= 0 && new_alt <= Math.PI/2)
        {
            drawingPane1.gaze_alt = new_alt;
        }
        StarPos.CalculateCoords(this.drawingPane1.smap, this.drawingPane1.gaze_alt, 
            this.drawingPane1.gaze_azi, this.drawingPane1.gaze_lat, 
            this.drawingPane1.gaze_lon, this.drawingPane1.now_msec);
        this.drawingPane1.repaint();
        UpdateViewerInfo();
    }//GEN-LAST:event_SetAltAziActionActionPerformed

    private void OpenConstellationsActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenConstellationsActionActionPerformed
        // TODO add your handling code here:
        JFileChooser const_filechooser = new JFileChooser();
        int returnVal = const_filechooser.showOpenDialog(this);
        
        if(returnVal == JFileChooser.APPROVE_OPTION)
        {
            try
            {
            File file = const_filechooser.getSelectedFile();
            String[] fname = new String[1];
            fname[0] = file.getAbsolutePath();
            ReadArgs(fname);
            }
            catch(Exception e)
            {
                System.out.println("Could not open constellation file");
            }
        }
        this.drawingPane1.repaint();
    }//GEN-LAST:event_OpenConstellationsActionActionPerformed

    private void OpenStarsActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenStarsActionActionPerformed
        // TODO add your handling code here:
        JFileChooser star_filechooser = new JFileChooser();
        int returnVal = star_filechooser.showOpenDialog(this);
        
        if(returnVal == JFileChooser.APPROVE_OPTION)
        {
            try
            {
            File file = star_filechooser.getSelectedFile();
            String[] fname = new String[1];
            fname[0] = file.getAbsolutePath();
            ReadArgs(fname);
            StarPos.CalculateCoords(this.drawingPane1.smap, this.drawingPane1.gaze_alt, 
                        this.drawingPane1.gaze_azi, this.drawingPane1.gaze_lat, 
                        this.drawingPane1.gaze_lon, this.drawingPane1.now_msec);
            }
            catch(Exception e)
            {
                System.out.println("Could not open star file");
            }

        }
        this.drawingPane1.repaint();
    }//GEN-LAST:event_OpenStarsActionActionPerformed

    private void CloseStarsActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseStarsActionActionPerformed
        // TODO add your handling code here:
        this.drawingPane1.smap = new ArrayList();
        this.drawingPane1.repaint();
    }//GEN-LAST:event_CloseStarsActionActionPerformed

    private void CloseConstellationsActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseConstellationsActionActionPerformed
        // TODO add your handling code here
        this.drawingPane1.cmap = new ArrayList();
        this.drawingPane1.repaint();
    }//GEN-LAST:event_CloseConstellationsActionActionPerformed

    private void QuitActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuitActionActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_QuitActionActionPerformed

    private void SetLocationActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetLocationActionActionPerformed
        // TODO add your handling code here:
        String in_lat = JOptionPane.showInputDialog(this, "Enter new Lattitude (+/- 90.0)");
        if(in_lat != null)
        {
            try
            {
                this.drawingPane1.gaze_lat = Double.parseDouble(in_lat);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(this,"\"" + in_lat + "\" is formatted incorrectly");
            }
        }
        
        String in_lon = JOptionPane.showInputDialog(this, "Enter new Longitude (+/- 180.0)");
        if(in_lon != null)
        {
            try
            {
                this.drawingPane1.gaze_lon = Double.parseDouble(in_lon);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(this, "\"" + in_lon + "\" is formatted incorrectly");
            }
        }
        
        StarPos.CalculateCoords(this.drawingPane1.smap, this.drawingPane1.gaze_alt, 
                        this.drawingPane1.gaze_azi, this.drawingPane1.gaze_lat, 
                        this.drawingPane1.gaze_lon, this.drawingPane1.now_msec);
        this.drawingPane1.repaint();
        UpdateViewerInfo();
    }//GEN-LAST:event_SetLocationActionActionPerformed

    private void ToggleIdentifiersActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToggleIdentifiersActionActionPerformed
        // TODO add your handling code here:
        this.drawingPane1.Identifiers_Visible = ToggleIdentifiersAction.getState();
        this.drawingPane1.repaint();
    }//GEN-LAST:event_ToggleIdentifiersActionActionPerformed

    private void ToggleConstellationsActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToggleConstellationsActionActionPerformed
        // TODO add your handling code here:
        this.drawingPane1.Constellations_Visible = ToggleConstellationsAction.getState();
        this.drawingPane1.repaint();
    }//GEN-LAST:event_ToggleConstellationsActionActionPerformed

    private void AboutActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutActionActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "This program has many features, below is a quick guide.\n\n" +
            "Right Click = Select closest star to cursor.\n" +
            "Left Click = Center view on closest star to cursor.\n" +
            "ESC = Deselect current star.\n" +
            "EQUALS = Zoom In.\n" +
            "MINUS = Zoom Out.\n" +
            "Arrow Keys = Change gaze altitude/azimuth.\n" +
            "SPACE = Start or Stop Time Lapse");
    }//GEN-LAST:event_AboutActionActionPerformed

    private void ZoomOutActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZoomOutActionActionPerformed
        // TODO add your handling code here:
        this.drawingPane1.zoom_factor *= 0.95;
        if(this.drawingPane1.zoom_factor <= 1)
            this.drawingPane1.zoom_factor = 1;
        
        this.drawingPane1.repaint();
    }//GEN-LAST:event_ZoomOutActionActionPerformed

    private void ZoomInActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZoomInActionActionPerformed
        // TODO add your handling code here:
        this.drawingPane1.zoom_factor *= 1.052631579;
        if(this.drawingPane1.zoom_factor >= 4.658990676)
            this.drawingPane1.zoom_factor = 4.658990676;
        
        this.drawingPane1.repaint();
    }//GEN-LAST:event_ZoomInActionActionPerformed

    private void SetCutoffActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetCutoffActionActionPerformed
        // TODO add your handling code here:
        String cutoff = JOptionPane.showInputDialog(this, "Enter a Visual Magnitude to filter dim stars. (-2.0 -> 10.0)");
        if(cutoff != null)
        {
            try
            {
                this.drawingPane1.VMagCutoff = Double.parseDouble(cutoff);

            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "\"" + cutoff + "\"" + " is formatted incorrectly");
            }
        }
        UpdateViewerInfo();
    }//GEN-LAST:event_SetCutoffActionActionPerformed

    private void drawingPane1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_drawingPane1KeyPressed
        // TODO add your handling code here:
        switch(evt.getKeyCode())
        {
            case KeyEvent.VK_ESCAPE:
                this.drawingPane1.SelectedStar = new Star();
                UpdateSelectedStar();
                break;
            case KeyEvent.VK_UP:
                drawingPane1.LookUp(10);
                break;
            case KeyEvent.VK_DOWN:
                drawingPane1.LookDown(10);
                break;
            case KeyEvent.VK_LEFT:
                drawingPane1.LookLeft(10);
                break;
            case KeyEvent.VK_RIGHT:
                drawingPane1.LookRight(10);
        }
        StarPos.CalculateCoords(this.drawingPane1.smap, this.drawingPane1.gaze_alt, 
                this.drawingPane1.gaze_azi, this.drawingPane1.gaze_lat, 
                this.drawingPane1.gaze_lon, this.drawingPane1.now_msec);
        this.drawingPane1.repaint();
        UpdateViewerInfo();
    }//GEN-LAST:event_drawingPane1KeyPressed

    private void drawingPane1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingPane1MousePressed
        // TODO add your handling code here:
        this.drawingPane1.mousePressed(evt);
        //read any info that might have changed
        UpdateViewerInfo();
    }//GEN-LAST:event_drawingPane1MousePressed

    private void drawingPane1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingPane1MouseReleased
        // TODO add your handling code here:
        this.drawingPane1.mouseReleased(evt);
        //read any info that might have changed
        int button = evt.getButton();
        switch(button)
        {
            case MouseEvent.BUTTON1:    //LEFT CLICK
                break;
            case MouseEvent.BUTTON2:    //SCROLL WHEEL CLICK?
                break;
            case MouseEvent.BUTTON3:    //RIGHT CLICK
                FocusView();
                break;
            default:
                break;
        }
        UpdateSelectedStar();
        UpdateViewerInfo();
    }//GEN-LAST:event_drawingPane1MouseReleased

    private void drawingPane1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingPane1MouseDragged
        // TODO add your handling code here:
        this.drawingPane1.mouseDragged(evt);
        //read any info that might have changed
        UpdateViewerInfo();
    }//GEN-LAST:event_drawingPane1MouseDragged

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_formKeyPressed

    private void ToggleGridActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToggleGridActionActionPerformed
        // TODO add your handling code here:
        this.drawingPane1.GridLines_Visible = ToggleGridAction.getState();
        this.drawingPane1.repaint();
    }//GEN-LAST:event_ToggleGridActionActionPerformed

    private void ToggleTimeLapseActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToggleTimeLapseActionActionPerformed
        // TODO add your handling code here:
        TimeLapseEnabled = ToggleTimeLapseAction.getState();
    }//GEN-LAST:event_ToggleTimeLapseActionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StarMap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StarMap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StarMap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StarMap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            StarMap myFrame = new StarMap(args);//.setVisible(true);
            myFrame.setVisible(true);
            myFrame.setExtendedState(myFrame.getExtendedState() | JFrame.MAXIMIZED_BOTH);
        });
    }
    
    /**
     *
     * @param args
     */
    public void ReadArgs(String[] args)
    {
        StarXMLHandler parser = new StarXMLHandler();
        for(String FileName : args)
        {
            parser.ReadXMLFile(FileName);
        }
        if(parser.ConstellationRead)
        {
            this.drawingPane1.cmap = parser.GetConstellationList();
            parser.ClearConstMap();
        }
        if(parser.StarRead)
        {
            this.drawingPane1.smap = parser.GetStarList();
            this.drawingPane1.NamedStars = parser.GetNamedStars();
            parser.ClearStarList();
            //now each star needs its coords to be calculated
        }
    }

    private void UpdateSelectedStar()
    {
        if(this.drawingPane1.SelectedStar.name.length() == 0)
            ClearSelectedStarInfo();
        else
        {
            NameTextBox.setText(this.drawingPane1.SelectedStar.name);
            CommonNameTextBox.setText(this.drawingPane1.SelectedStar.common_name);
            HRNumberTextBox.setText(Integer.toString(this.drawingPane1.SelectedStar.HRnumber));
            ConstellationTextBox.setText(this.drawingPane1.SelectedStar.constellation);
            VMagTextBox.setText(Double.toString(this.drawingPane1.SelectedStar.vmag));
            ClassTextBox.setText(this.drawingPane1.SelectedStar.starClass);
            final double[] rasc = this.drawingPane1.SelectedStar.ra;
            final double[] declin = this.drawingPane1.SelectedStar.dec;
            RATextBox.setText(Double.toString(rasc[0]) + " " + Double.toString(rasc[1]) + " " + Double.toString(rasc[2]));
            DecTextBox.setText(Double.toString(declin[0]) + " " + Double.toString(declin[1]) + " " + Double.toString(declin[2]));
            AltitudeTextBox.setText(Double.toString(Math.toDegrees(this.drawingPane1.SelectedStar.alt)).substring(0, min(
                                    Double.toString(Math.toDegrees(this.drawingPane1.SelectedStar.alt)).length(), 8)));
            AzimuthTextBox.setText(Double.toString(Math.toDegrees(this.drawingPane1.SelectedStar.azi)).substring(0, min(
                                   Double.toString(Math.toDegrees(this.drawingPane1.SelectedStar.azi)).length(), 8)));    
        }
        

    }
    
    private void ClearSelectedStarInfo()
    {
        NameTextBox.setText("");
        CommonNameTextBox.setText("");
        HRNumberTextBox.setText("");
        ConstellationTextBox.setText("");
        VMagTextBox.setText("");
        ClassTextBox.setText("");
        RATextBox.setText("");
        DecTextBox.setText("");
        AltitudeTextBox.setText("");
        AzimuthTextBox.setText("");
    }
    
    private void UpdateViewerInfo()
    {
        String altstr = Double.toString(Math.toDegrees(this.drawingPane1.gaze_alt));
        String azistr = Double.toString(Math.toDegrees(this.drawingPane1.gaze_azi));
        GazeAltTextBox.setText(altstr.substring(0, min(altstr.length(), 8)));
        GazeAzimuthTextBox.setText(azistr.substring(0, min(azistr.length(), 8)));
        LattitudeTextBox.setText(Double.toString(this.drawingPane1.gaze_lat));
        LongitudeTextBox.setText(Double.toString(this.drawingPane1.gaze_lon));
        DateTextBox.setText(MillisToDate(this.drawingPane1.now_msec));
        VMagCutoffTextBox.setText(Double.toString(this.drawingPane1.VMagCutoff));
        
    }
    
    private int min(int a, int b)
    {
        if(a < b)
            return a;
        return b;
    }
    
        private void FocusView()
        {
            this.drawingPane1.gaze_alt = this.drawingPane1.SelectedStar.alt;
            this.drawingPane1.gaze_azi = this.drawingPane1.SelectedStar.azi;
            StarPos.CalculateCoords(this.drawingPane1.smap, this.drawingPane1.gaze_alt, 
                        this.drawingPane1.gaze_azi, this.drawingPane1.gaze_lat, 
                        this.drawingPane1.gaze_lon, this.drawingPane1.now_msec);
            this.drawingPane1.repaint();
            
            
        }
        
        private String MillisToDate(long msec)
        {
            Calendar calendar = Calendar.getInstance();
            calendar.setTimeInMillis(msec);
            int Year = calendar.get(Calendar.YEAR);
            int Month = calendar.get(Calendar.MONTH);
            int Day = calendar.get(Calendar.DAY_OF_MONTH);
            int Hour = calendar.get(Calendar.HOUR_OF_DAY);
            int Min = calendar.get(Calendar.MINUTE);
            int Sec = calendar.get(Calendar.SECOND);
            
            String retval = Integer.toString(Month) + "/";
            retval += Integer.toString(Day) + "/";
            retval += Integer.toString(Year) + "/" + " ";
            retval += Integer.toString(Hour) + ":";
            retval += Integer.toString(Min) + ":" + Integer.toString(Sec);
            
            return retval;
            
            
        }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutAction;
    private javax.swing.JTextField AltitudeTextBox;
    private javax.swing.JTextField AzimuthTextBox;
    private javax.swing.JTextField ClassTextBox;
    private javax.swing.JMenuItem CloseConstellationsAction;
    private javax.swing.JMenuItem CloseStarsAction;
    private javax.swing.JTextField CommonNameTextBox;
    private javax.swing.JTextField ConstellationTextBox;
    private javax.swing.JTextField DateTextBox;
    private javax.swing.JTextField DecTextBox;
    private javax.swing.JTextField GazeAltTextBox;
    private javax.swing.JTextField GazeAzimuthTextBox;
    private javax.swing.JTextField HRNumberTextBox;
    private javax.swing.JPanel InfoPanel;
    private javax.swing.JTextField LattitudeTextBox;
    private javax.swing.JTextField LongitudeTextBox;
    private javax.swing.JTextField NameTextBox;
    private javax.swing.JMenuItem OpenConstellationsAction;
    private javax.swing.JMenuItem OpenStarsAction;
    private javax.swing.JMenuItem QuitAction;
    private javax.swing.JTextField RATextBox;
    private javax.swing.JMenuItem SetAltAziAction;
    private javax.swing.JMenuItem SetCutoffAction;
    private javax.swing.JMenuItem SetDateTimeAction;
    private javax.swing.JMenuItem SetLocationAction;
    private javax.swing.JCheckBoxMenuItem ToggleConstellationsAction;
    private javax.swing.JCheckBoxMenuItem ToggleGridAction;
    private javax.swing.JCheckBoxMenuItem ToggleIdentifiersAction;
    private javax.swing.JCheckBoxMenuItem ToggleTimeLapseAction;
    private javax.swing.JTextField VMagCutoffTextBox;
    private javax.swing.JTextField VMagTextBox;
    private javax.swing.JMenuItem ZoomInAction;
    private javax.swing.JMenuItem ZoomOutAction;
    private starmap.DrawingPane drawingPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

}
